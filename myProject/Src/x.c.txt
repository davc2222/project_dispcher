#include <FreeRTOS.h>
#include <task.h>
#include <semphr.h>
#include <stdio.h>



// Task handles
TaskHandle_t xTask1Handle, xTask2Handle, xTask3Handle, xTask4Handle, xTask5Handle;

// Function prototypes for tasks
void vTask1(void *pvParameters);
void vTask2(void *pvParameters);
void vTask3(void *pvParameters);
void vTask4(void *pvParameters);
void vTask5(void *pvParameters);

int  main_myproject(void)
{
    // Create the mutex
    xMutex = xSemaphoreCreateMutex();
    
    if (xMutex != NULL)
    {
        // Create the tasks
        xTaskCreate(vTask1, "Task 1", configMINIMAL_STACK_SIZE, NULL, 1, &xTask1Handle);
        xTaskCreate(vTask2, "Task 2", configMINIMAL_STACK_SIZE, NULL, 1, &xTask2Handle);
        xTaskCreate(vTask3, "Task 3", configMINIMAL_STACK_SIZE, NULL, 1, &xTask3Handle);
        xTaskCreate(vTask4, "Task 4", configMINIMAL_STACK_SIZE, NULL, 1, &xTask4Handle);
        xTaskCreate(vTask5, "Task 5", configMINIMAL_STACK_SIZE, NULL, 1, &xTask5Handle);

        // Start the scheduler
        vTaskStartScheduler();
    }
    else
    {
        // If mutex creation failed
        printf("Mutex creation failed!\n");
    }

    // If all went well, we should never reach here
    for (;;);
}

// Task 1 implementation
void vTask1(void *pvParameters)
{
    for (;;)
    {
        if (xSemaphoreTake(xMutex, portMAX_DELAY) == pdTRUE)
        {
            // Critical section (access shared resource)
            printf("Task 1 is using the shared resource\n");

            // Simulate some work
            vTaskDelay(pdMS_TO_TICKS(1000));

            // Release the mutex
            xSemaphoreGive(xMutex);
        }
        vTaskDelay(pdMS_TO_TICKS(100)); // Simulate other work
    }
}

// Task 2 implementation
void vTask2(void *pvParameters)
{
    for (;;)
    {
        if (xSemaphoreTake(xMutex, portMAX_DELAY) == pdTRUE)
        {
            // Critical section (access shared resource)
            printf("Task 2 is using the shared resource\n");

            // Simulate some work
            vTaskDelay(pdMS_TO_TICKS(500));

            // Release the mutex
            xSemaphoreGive(xMutex);
        }
        vTaskDelay(pdMS_TO_TICKS(100)); // Simulate other work
    }
}

// Task 3 implementation
void vTask3(void *pvParameters)
{
    for (;;)
    {
        if (xSemaphoreTake(xMutex, portMAX_DELAY) == pdTRUE)
        {
            // Critical section (access shared resource)
            printf("Task 3 is using the shared resource\n");

            // Simulate some work
            vTaskDelay(pdMS_TO_TICKS(300));

            // Release the mutex
            xSemaphoreGive(xMutex);
        }
        vTaskDelay(pdMS_TO_TICKS(100)); // Simulate other work
    }
}

// Task 4 implementation
void vTask4(void *pvParameters)
{
    for (;;)
    {
        if (xSemaphoreTake(xMutex, portMAX_DELAY) == pdTRUE)
        {
            // Critical section (access shared resource)
            printf("Task 4 is using the shared resource\n");

            // Simulate some work
            vTaskDelay(pdMS_TO_TICKS(700));

            // Release the mutex
            xSemaphoreGive(xMutex);
        }
        vTaskDelay(pdMS_TO_TICKS(100)); // Simulate other work
    }
}

// Task 5 implementation
void vTask5(void *pvParameters)
{
    for (;;)
    {
        if (xSemaphoreTake(xMutex, portMAX_DELAY) == pdTRUE)
        {
            // Critical section (access shared resource)
            printf("Task 5 is using the shared resource\n");

            // Simulate some work
            vTaskDelay(pdMS_TO_TICKS(1200));

            // Release the mutex
            xSemaphoreGive(xMutex);
        }
        vTaskDelay(pdMS_TO_TICKS(100)); // Simulate other work
    }
}
